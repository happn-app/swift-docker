---
version: 1

name: swiftlang
description: Safe, fast, and expressive general-purpose programming language
homepage: https://swift.org/

maintainer: François Lamboley <francois.lamboley@happn.com>

source:
  url: None
  arch-mapping:
    amd64: amd64
  strip: 1

control:
  depends:
  - clang
  - libblocksruntime-dev
  - libcurl3
  - libicu57
  - libpython2.7
  - libxml2
  - swiftlang-libs
  description: |
    Swift is a general-purpose programming language built using a modern
    approach to safety, performance, and software design patterns.

    The goal of the Swift project is to create the best available language for
    uses ranging from systems programming, to mobile and desktop apps, scaling
    up to cloud services. Most importantly, Swift is designed to make writing
    and maintaining correct programs easier for the developer. To achieve this
    goal, we believe that the most obvious way to write Swift code must also be:

    - Safe. The most obvious way to write code should also behave in a safe
    manner. Undefined behavior is the enemy of safety, and developer mistakes
    should be caught before software is in production. Opting for safety
    sometimes means Swift will feel strict, but we believe that clarity saves
    time in the long run.

    - Fast. Swift is intended as a replacement for C-based languages (C, C++, and
    Objective-C). As such, Swift must be comparable to those languages in
    performance for most tasks. Performance must also be predictable and
    consistent, not just fast in short bursts that require clean-up later. There
    are lots of languages with novel features — being fast is rare.

    - Expressive. Swift benefits from decades of advancement in computer science
    to offer syntax that is a joy to use, with modern features developers
    expect. But Swift is never done. We will monitor language advancements and
    embrace what works, continually evolving to make Swift even better.

    Tools are a critical part of the Swift ecosystem. We strive to integrate
    well within a developer’s toolset, to build quickly, to present excellent
    diagnostics, and to enable interactive development experiences. Tools can
    make programming so much more powerful, like Swift-based playgrounds do in
    Xcode, or a web-based REPL can when working with Linux server-side code.
  section: devel

install:
  recipe:
  upstream:
    /usr/local/swift:
    - pattern: "*"
      exclude: "lib/swift/linux/*.so*"

links:
  /usr/bin/swift: /usr/local/swift/bin/swift
  /usr/bin/swiftc: /usr/local/swift/bin/swiftc

# vim: ts=2 sw=2 et
